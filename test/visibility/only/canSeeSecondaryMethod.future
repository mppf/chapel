bug: Secondary methods not handled correctly by 'only' lists

While methods defined within a class are recognized by an 'only' list which
includes the type in question, the same cannot be said of methods defined
outside the class.

This brings up an interesting question: if a secondary method on a type is
defined in a module other than the one which contains the original type
definition, how would you specify that you only wish to include that method?
Creating an 'except' list that includes everything but that method is unwieldy
if the module is of significant size.  Similarly, if you wished to avoid
secondary methods defined in that module, creating an 'only' list that listed
everything but those methods is also unwieldy.  I think the obvious choice would
be to name in the 'except'/'only' list the type on which these methods are
defined.  Is that feasible?  To demonstrate that, take a look at
canSeeSecondaryMethod2.chpl
